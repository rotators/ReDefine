name: Build

on:
 push:
  paths:
  - '.github/workflows/Build.yml'
  - 'Source/**'
  - '**.cmake'
 pull_request:

defaults:
 run:
  shell: bash

jobs:

 Build:
  runs-on: ${{ matrix.cfg.os }}
  name:    ${{ matrix.cfg.name }} (${{ matrix.cfg.platform }})
  strategy:
   fail-fast: false
   matrix:
    cfg:
    - { os: ubuntu-latest, name: GNU,    cc: gcc,   cxx: g++,     platform: x32, redefine: Build/ReDefine,             artifact: ReDefine-Linux }
    - { os: ubuntu-latest, name: GNU,    cc: gcc,   cxx: g++,     platform: x64, redefine: Build/ReDefine,             artifact: none }
    - { os: ubuntu-latest, name: Clang,  cc: clang, cxx: clang++, platform: x32, redefine: Build/ReDefine,             artifact: none }
    - { os: ubuntu-latest, name: Clang,  cc: clang, cxx: clang++, platform: x64, redefine: Build/ReDefine,             artifact: none }
    # https://github.com/actions/virtual-environments/issues/68
    # { os: windows-2016,  name: VS2017, cc: cl,    cxx: cl,      platform: x32, redefine: Build/Release/ReDefine.exe, artifact: none }
    # { os: windows-2016,  name: VS2017, cc: cl,    cxx: cl,      platform: x64, redefine: Build/Release/ReDefine.exe, artifact: none }
    - { os: windows-2019,  name: VS2019, cc: cl,    cxx: cl,      platform: x32, redefine: Build/Release/ReDefine.exe, artifact: ReDefine-Windows }
    - { os: windows-2019,  name: VS2019, cc: cl,    cxx: cl,      platform: x64, redefine: Build/Release/ReDefine.exe, artifact: none }

  steps:

  # required by gcc *and* clang
  - name: Install additional software
    if:   runner.os == 'Linux' && matrix.cfg.platform == 'x32'
    run:  sudo apt update && sudo apt install -y gcc-multilib g++-multilib && hash -r

  - name: Clone repository
    uses: actions/checkout@v2

  - name: Build
    run:  cmake -P Build.cmake
    env:
     CI:              true
     CC:              ${{ matrix.cfg.cc }}
     CXX:             ${{ matrix.cfg.cxx }}
     MATRIX_OS:       ${{ matrix.cfg.os }}
     MATRIX_PLATFORM: ${{ matrix.cfg.platform }}

  - name: Build check
    run:  |
          :
          file ${{ matrix.cfg.redefine }}
          ldd  ${{ matrix.cfg.redefine }}

          mkdir -p ReDefine
          cp ${{ matrix.cfg.redefine }} ReDefine

  - name: Test
    run:  cmake --build Build --config Release --target ReDefine.Test

  - name: Artifact
    if:   matrix.cfg.artifact != 'none'
    uses: actions/upload-artifact@v1
    with:
     name: ${{ matrix.cfg.artifact }}
     path: ReDefine

 ##

 Scan:
  needs: Build
  runs-on: ubuntu-latest

  steps:

  - name: Install Clang tools
    run:  |
          :
          for cmd in "apt update" "apt search clang-tools" "apt remove -y libllvm8" "apt install clang-tools-8 clang-tidy-8"; do
              echo ::group::$cmd
              sudo $cmd 2>&1
              echo ::endgroup::
          done

  - name: Clone repository
    uses: actions/checkout@v2

  - name: scan-build
    run:  scan-build-8 cmake -DBUILD_DIR=Build.ScanBuild -P Build.cmake || true

# - name: clang-tidy
#   run:  cmake -DBUILD_DIR=Build.ClangTidy -P Build.cmake
#   env:
#    CLANG_TIDY: clang-tidy-8
